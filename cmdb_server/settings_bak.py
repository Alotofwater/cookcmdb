"""
Django settings for cmdb_server project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import logging
from cmdb_server import celery_log_conf
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sxm9af_srmi@81&#x0*4()k1h0y27*q_3do7om9q@e=()2$u4('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

# celery配置
'''
https://blog.csdn.net/libing_thinking/article/details/78812472
broker:消息中间件-支持redis 与 RabbitMQ 
简单的配置，只需要设置 Redis 数据库的位置:
CELERY_BROKER_URL = 'redis://localhost:6379/0'
URL的格式为：
redis://:password@hostname:port/db_number
URL Scheme 后的所有字段都是可选的，并且默认为 localhost 的 6479 端口，使用数据库 0。我的配置是：
redis://127.0.0.1:password@ubuntu:6379/5


# RabbitMQ的配置
CELERY_BROKER_URL = 'amqp://账号:密码 @192.168.56.11:5672//vhost（主机名）'   # 配置broker  
CELERY_BROKER_URL = 'amqp://mxdrabbitmq:8852651a@192.168.56.11:5672//server01'
'''

# CELERY_BROKER_URL = 'redis://:lihuipeng@192.168.56.11:6379/3' # 消息中间件

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_BROKER_URL = 'redis://192.168.56.11:6379/5'  # 消息中间件
CELERY_ACCEPT_CONTENT = ["json"] # 指定任务接受的内容序列化类型(序列化)，一个列表；
CELERY_RESULT_SERIALIZER = "json" # 任务执行结果序列化方式
CELERY_RESULT_BACKEND = "django-db"  # 任务结束保存的位置，用的是django插件
CELERY_TASK_SERIALIZER = "json" # 任务序列化方式
CELERY_TIMEZONE="Asia/Shanghai"


# 日志配置
CELERYD_HIJACK_ROOT_LOGGER = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'client_api.apps.ClientapiConfig',
    'repository.apps.RepositoryConfig',
    'web.apps.WebConfig',
    'stark.apps.StarkConfig',
    'rbac.apps.RbacConfig',
    'django_celery_results',
    # 'rest_framework',
    'mrest_api.apps.MRestApiConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'rbac.middleware.rbac.RbacMiddleware',
]

ROOT_URLCONF = 'cmdb_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cmdb_server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'cmdb_dome',  # 要连接的数据库，连接前需要创建好
        'USER': 'root',  # 连接数据库的用户名
        'PASSWORD': '123321',  # 连接数据库的密码
        'HOST': '192.168.56.11',  # 连接主机，默认本级
        'PORT': 3306  # 端口 默认3306
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# 插件配置
PLUGIN_ITEMS = {
    "nic": "client_api.plugins.nic.Nic",  # 网络
    "disk": "client_api.plugins.disk.Disk",  # 磁盘
    "memory": "client_api.plugins.memory.Memory",  # 内存
}

USER_MODEL_PATH = "repository.models.AdminInfo"  # 配置用户信息表

MENU_SESSION_KEY = "u8fkkddsasdasdsjdfkjsf"  # 按钮的key
PERMISSION_SESSION_KEY = "u8fkkasssjdfkjsffsssfff"  # 权限key

# url白名单设置
PERMISSION_VALID_URL = [
    '/login/',
    '/logout/',
    '/admin/.*',
    # '/rbac/.*',
    '/api/server',
    '/restapi/.*',
]

# ################## 默认文件上传配置 ########################

# List of upload handler classes to be applied in order.
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# Maximum size, in bytes, of a request before it will be streamed to the
# file system instead of into memory.
# 允许内存中上传文件的大小
#   合法：InMemoryUploadedFile对象（写在内存）         -> 上传文件小于等于 FILE_UPLOAD_MAX_MEMORY_SIZE
# 不合法：TemporaryUploadedFile对象（写在临时文件）     -> 上传文件大于    FILE_UPLOAD_MAX_MEMORY_SIZE 且 小于 DATA_UPLOAD_MAX_MEMORY_SIZE
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB

# Maximum size in bytes of request data (excluding file uploads) that will be
# read before a SuspiciousOperation (RequestDataTooBig) is raised.
# 允许上传内容的大小（包含文件和其他请求内容）
DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB

# Maximum number of GET/POST parameters that will be read before a
# SuspiciousOperation (TooManyFieldsSent) is raised.
# 允许的上传文件数
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Directory in which upload streamed files will be temporarily saved. A value of
# `None` will make Django use the operating system's default temporary directory
# (i.e. "/tmp" on *nix systems).
# 临时文件夹路径
FILE_UPLOAD_TEMP_DIR = None

# The numeric mode to set newly-uploaded files to. The value should be a mode
# you'd pass directly to os.chmod; see https://docs.python.org/3/library/os.html#files-and-directories.
# 文件权限
FILE_UPLOAD_PERMISSIONS = None

# The numeric mode to assign to newly-created directories, when uploading files.
# The value should be a mode as you'd pass to os.chmod;
# see https://docs.python.org/3/library/os.html#files-and-directories.
# 文件夹权限
FILE_UPLOAD_DIRECTORY_PERMISSIONS = None


# 阿里云证书
access_key_id = ''
access_key_secret = ''

# cmdb资产管理的账号验证 
cmdbusername = 'zhangbuhua'
cmdbpasswd = '123'
collecturl = 'http://127.0.0.1:8600'


